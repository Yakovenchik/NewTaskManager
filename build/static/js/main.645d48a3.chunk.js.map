{"version":3,"sources":["Component/Task/index.js","Component/TaskList/index.js","Component/CreatingTask/index.js","Component/LogIn/index.js","Component/Modify/index.js","Container/MainPage.js","Store/Task.js","Store/LogIn.js","Store/index.js","index.js"],"names":["Task","inject","observer","_this$props$stores","this","props","stores","taskStore","logIn","item","react_default","a","createElement","className","status","reactstrap_es","id","username","email","text","type","alt","src","imagePreview","image_path","admin","onClick","modifyTask","openForm","Component","TaskList","index","currentPage","address","receiveList","_this","pagesCount","Math","ceil","totalCount","aria-label","disabled","handleClick","previous","href","Object","toConsumableArray","Array","map","page","i","active","key","next","sort","field","direction","taskList","src_Component_Task","taskId","CreatingTask","newTask","addTask","e","reader","FileReader","file","target","files","onloadend","image","result","readAsDataURL","adding","style","display","check","placeholder","onChange","value","required","name","getImage","sendTask","LogIn","inline","for","authUser","password","auth","Modify","changeTask","change","MainPage","src_Component_LogIn","src_Component_CreatingTask","src_Component_TaskList","src_Component_Modify","TaskStore","elem","form","FormData","append","fetch","crossDomain","method","mimeType","contentType","processData","body","dataType","then","res","json","document","getElementById","reset","alert","JSON","stringify","message","catch","error","console","log","encodeURIComponent","params_string","get","md5","createInit","_this2","arguments","length","undefined","response","tasks","total_task_count","observable","action","user","flagChange","root","ReactDOM","render","index_module","Container_MainPage"],"mappings":"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","file":"static/js/main.645d48a3.chunk.js","sourcesContent":["import {observer, inject} from \"mobx-react\";\r\nimport React, {Component} from \"react\";\r\nimport {Button, Label, Media} from \"reactstrap\";\r\nimport './index.css';\r\n\r\n@inject('stores')\r\n@observer\r\nclass Task extends Component {\r\n    render(){\r\n        const {taskStore, logIn} = this.props.stores;\r\n        const {item} = this.props;\r\n        return(\r\n            <div className=\"content\">\r\n                {item.status === 10 ? <div className=\"complete\">COMPLETED</div>:null}\r\n                <Label>Id: {item.id}</Label>\r\n                <div>\r\n                    <Label>Name: </Label>\r\n                    <p>{item.username}</p>\r\n                </div>\r\n                <div>\r\n                    <Label>Email: </Label>\r\n                    <p>{item.email}</p>\r\n                </div>\r\n                <div>\r\n                    <Label>Task: </Label>\r\n                    <p>{item.text}</p>\r\n                </div>\r\n                {this.props.type === \"preview\" ?\r\n                    <Media alt={item.id} src={item.imagePreview}/>\r\n                    :\r\n                    <Media alt={item.id} src={item.image_path}/>}\r\n                <br/>\r\n                {this.props.type !== \"preview\" && logIn.admin ?\r\n                    <Button onClick={() => {taskStore.modifyTask(item)}}>Change Content</Button> :\r\n                    null\r\n                }\r\n                {this.props.type === \"preview\" ?\r\n                    <Button onClick={() => taskStore.openForm(\"preview\")}>Close Preview</Button> :\r\n                    null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './index.css'\r\nimport Task from \"../Task\";\r\nimport { Pagination, PaginationItem, PaginationLink, Button, Label, FormGroup, Form } from 'reactstrap';\r\n\r\n@inject('stores')\r\n@observer\r\nclass TaskList extends Component {\r\n    handleClick(index) {\r\n        const {taskStore} = this.props.stores;\r\n        taskStore.currentPage = index;\r\n        const address = 'https://uxcandy.com/~shapoval/test-task-backend/?developer=Aleksandr&page='+(taskStore.currentPage+1);\r\n        taskStore.receiveList(address);\r\n    }\r\n    render(){\r\n        const {taskStore} = this.props.stores;\r\n        const pageSize = 3;\r\n        const pagesCount = Math.ceil(taskStore.totalCount / pageSize);\r\n        return(\r\n            <div>\r\n                <Pagination aria-label=\"Page navigation example\">\r\n                    <PaginationItem disabled={taskStore.currentPage <= 0}>\r\n                        <PaginationLink\r\n                            onClick={() => this.handleClick( taskStore.currentPage - 1)}\r\n                            previous\r\n                            href=\"#\"\r\n                        />\r\n                    </PaginationItem>\r\n\r\n                    {[...Array(pagesCount)].map((page, i) =>\r\n                        <PaginationItem active={i === taskStore.currentPage} key={i}>\r\n                            <PaginationLink onClick={() => this.handleClick(i)} href=\"#\">\r\n                                {i + 1}\r\n                            </PaginationLink>\r\n                        </PaginationItem>\r\n                    )}\r\n\r\n                    <PaginationItem disabled={taskStore.currentPage >= pagesCount - 1}>\r\n                        <PaginationLink\r\n                            onClick={() => this.handleClick( taskStore.currentPage + 1)}\r\n                            next\r\n                            href=\"#\"\r\n                        />\r\n                    </PaginationItem>\r\n                </Pagination>\r\n                <br/>\r\n                <Form>\r\n                    <FormGroup>\r\n                        <Label>Sort type: {taskStore.sort.field}</Label> <br/>\r\n                        <Button onClick={()=>{taskStore.sort.field = \"id\";taskStore.receiveList()}}\r\n                        >Id </Button>\r\n                        <Button onClick={()=>{taskStore.sort.field = \"email\";taskStore.receiveList()}}\r\n                        >Email </Button>\r\n                        <Button onClick={()=>{taskStore.sort.field = \"username\";taskStore.receiveList()}}\r\n                        >Username </Button>\r\n                        <Button onClick={()=>{taskStore.sort.field = \"status\";taskStore.receiveList()}}\r\n                        >Status </Button>\r\n                    </FormGroup> <br/>\r\n                    <FormGroup>\r\n                        <Label>Sort direction: {taskStore.sort.direction}</Label> <br/>\r\n                        <Button onClick={()=>{taskStore.sort.direction = \"asc\";taskStore.receiveList()}}\r\n                        >ASC </Button>\r\n                        <Button onClick={()=>{taskStore.sort.direction = \"desc\";taskStore.receiveList()}}\r\n                        >DESC </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n                {taskStore.taskList\r\n                    .map((item,i)=>{\r\n                        return(\r\n                            <div key={i}>\r\n                                <div className='task'>\r\n                                    <Task taskId={item.id} item={item} type=\"list\"/>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport Task from '../Task';\r\nimport './index.css';\r\nimport { Input, Button, Label, Form, FormGroup } from 'reactstrap';\r\n\r\n@inject('stores')\r\n@observer\r\nclass CreatingTask extends Component {\r\n\r\n    sendTask(newTask){\r\n        const taskStore = this.props.stores.taskStore;\r\n        taskStore.addTask(newTask);\r\n    }\r\n\r\n    getImage(e){\r\n        const { taskStore } = this.props.stores;\r\n        const reader = new FileReader();\r\n        const file = e.target.files[0];\r\n\r\n        reader.onloadend = () => {\r\n            taskStore.newTask.image = file;\r\n            taskStore.newTask.imagePreview = reader.result;\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    render(){\r\n        const { taskStore } = this.props.stores;\r\n        return(\r\n            <div className='headerTask'>\r\n                <h1>Tasks</h1>\r\n                <Button onClick={()=>taskStore.openForm(\"add_task\")}>\r\n                    {!taskStore.adding ? 'Add New Task' : 'Close Adding'}\r\n                </Button>\r\n                <Form className='add_task'  id = \"add_task\" style={{display: 'none'}} >\r\n                    <FormGroup check>\r\n                    <Label> Name: </Label>\r\n                        <Input placeholder='Name...' onChange={(e)=>taskStore.newTask.username=e.target.value}  required/>\r\n                    </FormGroup>\r\n                   <FormGroup check>\r\n                        <Label> Email: </Label>\r\n                        <Input type=\"email\" name=\"email\" placeholder='Email...' onChange={(e)=>taskStore.newTask.email=e.target.value}  required/>\r\n                    </FormGroup>\r\n                    <FormGroup check>\r\n                        <Label> Task: </Label>\r\n                        <Input type=\"text\" placeholder='Description...' onChange={(e)=>taskStore.newTask.text=e.target.value}  required/>\r\n                    </FormGroup>\r\n                   <FormGroup check>\r\n                        <Label> Image: </Label>\r\n                        <Input type=\"file\" onChange={(e)=>this.getImage(e)}/>\r\n                    </FormGroup>\r\n                    <FormGroup className='button_group'>\r\n                        <Button onClick={()=>taskStore.openForm(\"preview\")}>\r\n                            Preview\r\n                        </Button>\r\n                        <Button onClick={()=>{\r\n                            this.sendTask(taskStore.newTask);\r\n                        }}>\r\n                            New Task\r\n                        </Button>\r\n                        <Button onClick={()=>taskStore.openForm(\"add_task\")}>\r\n                           Close Adding\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n                <div className='preview' id=\"preview\" style={{display: 'none'}}>\r\n                    <Task item={taskStore.newTask} type=\"preview\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CreatingTask;","import React, {Component} from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport \"./index.css\";\r\nimport {observer, inject} from 'mobx-react';\r\n\r\n@inject('stores')\r\n@observer\r\nclass LogIn extends Component {\r\n    render() {\r\n        const {taskStore, logIn} = this.props.stores;\r\n        return (\r\n            <div>\r\n                <Button onClick={()=>taskStore.openForm(\"login_form\")}>\r\n                    LogIn\r\n                </Button>\r\n                <Form className=\"login_form\" inline style={{display: 'none'}} id=\"login_form\">\r\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                        <Label for=\"Username\" className=\"mr-sm-2\">Username:</Label>\r\n                        <Input id=\"Username\" placeholder=\"Username\" name = \"username\"\r\n                               onChange={(e)=>logIn.authUser.username=e.target.value}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                        <Label for=\"Password\" className=\"mr-sm-2\">Password:</Label>\r\n                        <Input type=\"password\" name=\"password\" id=\"Password\" placeholder=\"******\"\r\n                               onChange={(e)=>logIn.authUser.password=e.target.value}\r\n                        />\r\n                    </FormGroup>\r\n                    <div className=\"button_group\">\r\n                        <Button onClick={()=>logIn.auth(logIn.authUser)}\r\n                        >LogIn</Button>\r\n                        <Button onClick={()=>{taskStore.openForm(\"login_form\")}}>Close</Button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default LogIn;","import React, {Component} from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './index.css';\r\n\r\n@inject('stores')\r\n@observer\r\nclass Modify extends Component {\r\n    render() {\r\n        const { taskStore } = this.props.stores;\r\n        return (\r\n            <Form className=\"modify\" inline style={{display: 'none'}} id=\"modify\">\r\n                <Label for=\"text\" className=\"mr-sm-2\">Id: {taskStore.changeTask.id}</Label>\r\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                    <Label for=\"text\" className=\"mr-sm-2\">Text:</Label>\r\n                    <Input id=\"text\" value={taskStore.changeTask.text} placeholder=\"text\" name = \"text\"\r\n                           onChange={(e)=>taskStore.changeTask.text=e.target.value}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                    <Label for=\"status\" className=\"mr-sm-2\">Status(10 is completed):</Label>\r\n                    <Input name=\"status\" type=\"number\" id=\"status\" value = {taskStore.changeTask.status}\r\n                           onChange={(e)=>taskStore.changeTask.status = e.target.value}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup className=\"button_group\">\r\n                    <Button onClick={()=>{taskStore.change()}}>Change</Button>\r\n                    <Button onClick={()=>{taskStore.openForm(\"modify\")}}>Close</Button>\r\n                </FormGroup>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\nexport default Modify;","import React, {Component} from 'react';\r\nimport TaskList from '../Component/TaskList';\r\nimport CreatingTask from '../Component/CreatingTask';\r\nimport LogIn from '../Component/LogIn';\r\nimport Modify from \"../Component/Modify\";\r\nimport {inject} from 'mobx-react';\r\n\r\n@inject('stores')\r\nclass MainPage extends Component{\r\n    componentDidMount(){\r\n        const {taskStore} = this.props.stores;\r\n        taskStore.receiveList()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <LogIn/>\r\n                <CreatingTask />\r\n                <TaskList />\r\n                <Modify/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MainPage;","import { observable, action} from 'mobx';\r\nimport md5 from 'md5';\r\n\r\nexport default class TaskStore{\r\n    @observable taskList=[];\r\n    @observable newTask = {};\r\n    @observable adding = false;\r\n    @observable currentPage = 0;\r\n    @observable totalCount = 0;\r\n    @observable changeTask = {};\r\n    @observable sort = {\r\n        direction: '',\r\n        field: ''\r\n    };\r\n\r\n    @action addTask(elem){\r\n        const form = new FormData();\r\n            form.append(\"username\", elem.username);\r\n            form.append(\"email\", elem.email);\r\n            form.append(\"text\", elem.text);\r\n            form.append(\"image\", elem.image);\r\n        const createInit = {\r\n            crossDomain: true,\r\n            method: 'POST',\r\n            mimeType: \"multipart/form-data\",\r\n            contentType: false,\r\n            processData: false,\r\n            body: form,\r\n            dataType: \"json\"\r\n        };\r\n\r\n        const address = 'https://uxcandy.com/~shapoval/test-task-backend/create?developer=Aleksandr';\r\n        fetch(address, createInit)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.status === \"ok\") {\r\n                    document.getElementById(\"add_task\").reset();\r\n                    this.openForm(\"add_task\");\r\n                    this.receiveList();\r\n                }   else    {\r\n                    alert(JSON.stringify(res.message));\r\n                }})\r\n            .catch(error=>{\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    @action modifyTask(item){\r\n        this.changeTask = {\r\n            status: item.status,\r\n            text: item.text,\r\n            id: item.id\r\n        };\r\n        this.openForm(\"modify\");\r\n    }\r\n    @action change(){\r\n        const form = new FormData();\r\n        form.append(\"text\", encodeURIComponent(this.changeTask.text));\r\n        form.append(\"status\", this.changeTask.status);\r\n        form.append(\"token\", \"beejee\");\r\n        const params_string = \"status=\"+this.changeTask.status+\"&text=\"+form.get(\"text\")+\"&token=beejee\";\r\n        form.append(\"signature\", md5(params_string));\r\n        const createInit = {\r\n            crossDomain: true,\r\n            method: 'POST',\r\n            mimeType: \"multipart/form-data\",\r\n            contentType: false,\r\n            processData: false,\r\n            body: form,\r\n            dataType: \"json\"\r\n        };\r\n        const address = 'https://uxcandy.com/~shapoval/test-task-backend/edit/'+this.changeTask.id+'?developer=Aleksandr';\r\n        fetch(address, createInit)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.status !== \"ok\") {\r\n                    alert(JSON.stringify(res));\r\n                }})\r\n            .catch(error=>{\r\n                console.log(error)\r\n            });\r\n        this.receiveList();\r\n    }\r\n\r\n    @action openForm(id) {\r\n        if (document.getElementById(id).style.display === 'none') {\r\n            document.getElementById(id).style.display = 'block';\r\n        } else {\r\n            document.getElementById(id).style.display = 'none';\r\n        }\r\n    }\r\n\r\n    @action receiveList(address = 'https://uxcandy.com/~shapoval/test-task-backend/?developer=Aleksandr'){\r\n        fetch(address+'&sort_field='+this.sort.field+'&sort_direction='+this.sort.direction+'&page='+(this.currentPage+1))\r\n            .then(response=>\r\n                response.json()\r\n            )\r\n            .then(res=>{\r\n                this.taskList = res.message.tasks;\r\n                this.totalCount = res.message.total_task_count;\r\n            })\r\n            .catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n}","import { observable, action} from 'mobx';\r\nimport stores from \"./index\";\r\n\r\nexport default class LogIn{\r\n    @observable admin = false;\r\n    @observable authUser = {};\r\n\r\n    @action auth(user){\r\n        const {taskStore} = stores;\r\n        let flagChange = false;\r\n        !user.username ? alert(\"Username is require\") : !user.password ? alert(\"Password is reaquire\") : flagChange = true;\r\n        if (flagChange && user.username === \"admin\" && user.password === '123') {\r\n            this.admin = true;\r\n            taskStore.openForm(\"login_form\");\r\n            document.getElementById(\"login_form\").reset()\r\n        }   else {\r\n            this.admin = false;\r\n            taskStore.openForm(\"login_form\");\r\n            document.getElementById(\"login_form\").reset()\r\n        }\r\n        return flagChange;\r\n    }\r\n}","import TaskStore from \"./Task\";\r\nimport LogIn from \"./LogIn\"\r\n\r\nconst taskStore = new TaskStore();\r\nconst logIn = new LogIn();\r\n\r\nconst stores = {\r\n    taskStore,\r\n    logIn\r\n};\r\n\r\nexport default stores;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainPage from './Container/MainPage';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport stores from './Store';\r\nimport {Provider} from \"mobx-react\";\r\n\r\nconst root = document.getElementById('root');\r\nReactDOM.render(\r\n    <Provider stores = {stores}>\r\n        <MainPage />\r\n    </Provider>\r\n    , root);\r\n\r\n"],"sourceRoot":""}