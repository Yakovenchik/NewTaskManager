{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\yakov\\\\WebstormProjects\\\\NewTaskManager\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\yakov\\\\WebstormProjects\\\\NewTaskManager\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\yakov\\\\WebstormProjects\\\\NewTaskManager\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\yakov\\\\WebstormProjects\\\\NewTaskManager\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\yakov\\\\WebstormProjects\\\\NewTaskManager\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;\n\nimport { observable, action } from 'mobx';\nimport md5 from 'md5';\nvar TaskStore = (_class =\n/*#__PURE__*/\nfunction () {\n  function TaskStore() {\n    _classCallCheck(this, TaskStore);\n\n    _initializerDefineProperty(this, \"taskList\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"newTask\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"adding\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"currentPage\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"totalCount\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"changeTask\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"sort\", _descriptor7, this);\n  }\n\n  _createClass(TaskStore, [{\n    key: \"addTask\",\n    value: function addTask(elem) {\n      var _this = this;\n\n      var form = new FormData();\n      form.append(\"username\", elem.username);\n      form.append(\"email\", elem.email);\n      form.append(\"text\", elem.text);\n      form.append(\"image\", elem.image);\n      var createInit = {\n        crossDomain: true,\n        method: 'POST',\n        mimeType: \"multipart/form-data\",\n        contentType: false,\n        processData: false,\n        body: form,\n        dataType: \"json\"\n      };\n      var address = 'https://uxcandy.com/~shapoval/test-task-backend/create?developer=Aleksandr';\n      fetch(address, createInit).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (res.status === \"ok\") {\n          document.getElementById(\"add_task\").reset();\n\n          _this.receiveList();\n        } else {\n          alert(JSON.stringify(res.message));\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"modifyTask\",\n    value: function modifyTask(item) {\n      this.changeTask = {\n        status: item.status,\n        text: item.text,\n        id: item.id\n      };\n    }\n  }, {\n    key: \"change\",\n    value: function change() {\n      var _this2 = this;\n\n      var form = new FormData();\n      form.append(\"text\", encodeURIComponent(this.changeTask.text));\n      form.append(\"status\", this.changeTask.status);\n      form.append(\"token\", \"beejee\");\n      var params_string = \"status=\" + this.changeTask.status + \"&text=\" + form.get(\"text\") + \"&token=beejee\";\n      form.append(\"signature\", md5(params_string));\n      var createInit = {\n        crossDomain: true,\n        method: 'POST',\n        mimeType: \"multipart/form-data\",\n        contentType: false,\n        processData: false,\n        body: form,\n        dataType: \"json\"\n      };\n      var address = 'https://uxcandy.com/~shapoval/test-task-backend/edit/' + this.changeTask.id + '?developer=Aleksandr';\n      fetch(address, createInit).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (res.status !== \"ok\") {\n          alert(JSON.stringify(res));\n        }\n\n        _this2.receiveList();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"receiveList\",\n    value: function receiveList() {\n      var _this3 = this;\n\n      var address = 'https://uxcandy.com/~shapoval/test-task-backend/?developer=Aleksandr';\n      fetch(address + '&sort_field=' + this.sort.field + '&sort_direction=' + this.sort.direction + '&page=' + (this.currentPage + 1)).then(function (response) {\n        return response.json();\n      }).then(function (res) {\n        _this3.taskList = res.message.tasks;\n        _this3.totalCount = res.message.total_task_count;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }]);\n\n  return TaskStore;\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"taskList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"newTask\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"adding\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"currentPage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"totalCount\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"changeTask\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"sort\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      direction: 'asc',\n      field: ''\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"addTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"modifyTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"modifyTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"change\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"change\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"receiveList\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"receiveList\"), _class.prototype)), _class);\nexport { TaskStore as default };","map":{"version":3,"sources":["C:\\Users\\yakov\\WebstormProjects\\NewTaskManager\\src\\Store\\Task.js"],"names":["observable","action","md5","TaskStore","elem","form","FormData","append","username","email","text","image","createInit","crossDomain","method","mimeType","contentType","processData","body","dataType","address","fetch","then","res","json","status","document","getElementById","reset","receiveList","alert","JSON","stringify","message","catch","error","console","log","item","changeTask","id","encodeURIComponent","params_string","get","sort","field","direction","currentPage","response","taskList","tasks","totalCount","total_task_count"],"mappings":"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","sourcesContent":["import { observable, action} from 'mobx';\r\nimport md5 from 'md5';\r\n\r\nexport default class TaskStore{\r\n    @observable taskList=[];\r\n    @observable newTask = {};\r\n    @observable adding = false;\r\n    @observable currentPage = 0;\r\n    @observable totalCount = 0;\r\n    @observable changeTask = {};\r\n    @observable sort = {\r\n        direction: 'asc',\r\n        field: ''\r\n    };\r\n\r\n    @action addTask(elem){\r\n        const form = new FormData();\r\n            form.append(\"username\", elem.username);\r\n            form.append(\"email\", elem.email);\r\n            form.append(\"text\", elem.text);\r\n            form.append(\"image\", elem.image);\r\n        const createInit = {\r\n            crossDomain: true,\r\n            method: 'POST',\r\n            mimeType: \"multipart/form-data\",\r\n            contentType: false,\r\n            processData: false,\r\n            body: form,\r\n            dataType: \"json\"\r\n        };\r\n\r\n        const address = 'https://uxcandy.com/~shapoval/test-task-backend/create?developer=Aleksandr';\r\n        fetch(address, createInit)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.status === \"ok\") {\r\n                    document.getElementById(\"add_task\").reset();\r\n                    this.receiveList();\r\n                }   else    {\r\n                    alert(JSON.stringify(res.message));\r\n                }})\r\n            .catch(error=>{\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    @action modifyTask(item){\r\n        this.changeTask = {\r\n            status: item.status,\r\n            text: item.text,\r\n            id: item.id\r\n        };\r\n    }\r\n    @action change(){\r\n        const form = new FormData();\r\n        form.append(\"text\", encodeURIComponent(this.changeTask.text));\r\n        form.append(\"status\", this.changeTask.status);\r\n        form.append(\"token\", \"beejee\");\r\n        const params_string = \"status=\"+this.changeTask.status+\"&text=\"+form.get(\"text\")+\"&token=beejee\";\r\n        form.append(\"signature\", md5(params_string));\r\n        const createInit = {\r\n            crossDomain: true,\r\n            method: 'POST',\r\n            mimeType: \"multipart/form-data\",\r\n            contentType: false,\r\n            processData: false,\r\n            body: form,\r\n            dataType: \"json\"\r\n        };\r\n        const address = 'https://uxcandy.com/~shapoval/test-task-backend/edit/'+this.changeTask.id+'?developer=Aleksandr';\r\n        fetch(address, createInit)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.status !== \"ok\") {\r\n                    alert(JSON.stringify(res));\r\n                }\r\n                this.receiveList();\r\n            })\r\n            .catch(error=>{\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    @action receiveList(){\r\n        const address = 'https://uxcandy.com/~shapoval/test-task-backend/?developer=Aleksandr';\r\n        fetch(address+'&sort_field='+this.sort.field+'&sort_direction='+this.sort.direction+'&page='+(this.currentPage+1))\r\n            .then(response=>\r\n                response.json()\r\n            )\r\n            .then(res=>{\r\n                this.taskList = res.message.tasks;\r\n                this.totalCount = res.message.total_task_count;\r\n            })\r\n            .catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}